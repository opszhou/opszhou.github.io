<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpsZhou&#39; Blog</title>
  
  <subtitle>notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arvirt.com/"/>
  <updated>2019-09-21T06:45:17.547Z</updated>
  <id>https://arvirt.com/</id>
  
  <author>
    <name>OpsZhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「转」工作中的行为准则</title>
    <link href="https://arvirt.com/2019/04/13/code-of-conduct/"/>
    <id>https://arvirt.com/2019/04/13/code-of-conduct/</id>
    <published>2019-04-13T07:15:06.000Z</published>
    <updated>2019-09-21T06:45:17.547Z</updated>
    
    <content type="html"><![CDATA[<p>网上看了篇关于日常工作中的行为准则的文章，写的很好，和作者联系转载过来(做了一些简单的修改，删减)，完整原文请看<a href="https://openacid.github.io/culture/code-of-conduct/" target="_blank" rel="noopener">此处</a>。其实，不仅仅适用于工作中，日常生活中同样如此。</p><h3 id="相互尊重"><a href="#相互尊重" class="headerlink" title="相互尊重"></a>相互尊重</h3><p><strong>当对方说他不知道某件事情时, 不要「刻意的或无意的」表示惊讶。</strong></p><p>包括技术问题什么?!我不能相信你不知道堆栈是什么!」和非技术问题「你不知道谁是RMS ?!」(RMS: Richard Matthew Stallman, 自由软件奠基人)。</p><p>「故作惊讶」不会让沟通变得更顺畅, 同时也没有提供更多的信息到对话中: 当人们故作惊讶时, 通常是为了能自我感觉良好, 而使其他人感受很糟糕, 即使这些行为不是有意的。</p><p>显然, 这与我们的另一个原则十分相关: 创造一个氛围, 让人们在说「我不知道」时能感到自在无压力。</p><a id="more"></a><p><strong>避免「不易察觉」的嘲弄语气</strong></p><p>这些不易察觉的嘲弄语气, 也被称为微攻击性, 是一些让别人感到不舒服的小事情, 例如, 「这事太简单了我奶奶都会」就是一个这样的例子, 因为这句话里带着些许性别歧视和年龄歧视。</p><p>说它「不易察觉」, 是因为可能不是所有人都能马上感觉到这些言辞的问题，即使是这些言辞所指的那些人。 但是, 即使它们是不易察觉的, 可能还看起来像句玩笑, 而且往往是无意的, 一系列这样的言词也会给对方带来被嘲弄的感觉。</p><h3 id="人人平等"><a href="#人人平等" class="headerlink" title="人人平等"></a>人人平等</h3><p><strong>避免「好为人师」</strong></p><p>「呃, 但实际上是…」发生在这样的场景中: 对方说了一些事情, 但其中有些不准确的小地方, 这时你打断对方说, 「呃, 但实际上是…」, 然后给出一个小纠正。</p><p>不论当时讨论的问题简单或复杂, 除非这些小问题是非常关键的, 否则不需要一定要指出来。</p><p>如果这些小问题对沟通至关重要, 如果不明确下来会产生歧义, 那么一个必要的澄清和单纯的为人师就之间才有区别。</p><h3 id="沉默是金"><a href="#沉默是金" class="headerlink" title="沉默是金"></a>沉默是金</h3><p><strong>避免在不了解问题全貌的情况下给出意见</strong></p><p>如果你偶然听到有人在讨论某个问题, 最好不要立刻向对方表达你的意见。<br>其中一个原因是这样可能会导致「too many cooks」的问题(太多厨子一起做饭很快会毁了一道菜), 而更重要的是, 突然加入到一个进行到一半的讨论有些粗鲁, 更重要的是很可能会破坏正在进行的讨论。 在使用<code>Slack</code>进行的沟通中尤其如此。 在一场正在进行的对话中, 这种突然的介入, 尤其当你只是通过回滚了几屏聊天记录来了解到对话内容的时候, 可能会造成很大的干扰。</p><p>这并不是说你不应该加入对话提供帮忙或建议。 相反, 我们鼓励所有这些行动。 它只是意味着, 当你想要帮助别人或与他人合作时, 你应该充分参与来了解到更多信息, 而不是时不时的插话。</p><h3 id="信息反馈"><a href="#信息反馈" class="headerlink" title="信息反馈"></a>信息反馈</h3><p><strong>给出建设性的, 而不是否定性的反馈。</strong></p><p>「否定性的反馈」是说, 它指出了一个产品或一个人的问题, 却没有提到如何改进他们的行为或产品.</p><p>工作中, 否定性的反馈通常看起来是这样的: 「你没有编写足够的测试」或「你的代码质量不够好」。针对个人的评价可能会更严重, 通常类似这种: 「你不应该那么武断」或「你是个累赘, 因为你问了太多问题」。</p><p>「建设性的反馈」更多的是关于一个人如何能做得更好, 而不是他们做错了什么。 如果你想让某人做得更好, 你应该告诉他们什么是更好的。 首先, 询问一下这个问题讨论的前后内容, 了解问题的场景, 然后如果你发现有改进的空间, 就给出明确的建议。</p><p>它创造了这样一个环境: 让大家明白成功是什么样子的, 而不是让人觉得自己很失败。</p><p><strong>代码、配置文件, 以及对这些东西的评审也是沟通的一种。</strong></p><p>就像你希望能够与他人在面对面交流时能友好积极一样, 在通过代码或代码评审时与他人的交流也应该这样。</p><p>你不是你的产品。 往往针对技术或产品的评论是直接和直白的, 但记住, 这些都是针对产品的, 这不是针对作者的。 不用说你一定非常在意你的工作和作品, 并在尽可能做到最好, 但这种对自己作品的感情有时会让评审变得困难重重。每个人都应该认识到: 在评审中发现问题比在生产环境中发现问题要好的多. 而且评审可以确保你的工作能跟整个团队的目标一致。</p><p>在评审他人的作品时, 首先假设作者的这些决定是有原因的, 而不是在凭空想出的。如果你不明白作者为什么这么做, 就问问他这么做的原因。</p><p>另一方面, 做到务实, 多询问问题的背景, 以不阻碍工作推进的方式做事, 例如如果你在别人的代码中发现一个你认为需要修改的问题, 但这个问题并没有在<code>code style</code>指南中明确规定, 那不提也罢.</p><p>代码、配置文件、架构、平台和框架总是需要演进和改变的。 如果你认为自己的设想是正确的, 那就推进这些改变, 但是, 也并不一定仅仅因为它是正确的就一定要改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上看了篇关于日常工作中的行为准则的文章，写的很好，和作者联系转载过来(做了一些简单的修改，删减)，完整原文请看&lt;a href=&quot;https://openacid.github.io/culture/code-of-conduct/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此处&lt;/a&gt;。其实，不仅仅适用于工作中，日常生活中同样如此。&lt;/p&gt;
&lt;h3 id=&quot;相互尊重&quot;&gt;&lt;a href=&quot;#相互尊重&quot; class=&quot;headerlink&quot; title=&quot;相互尊重&quot;&gt;&lt;/a&gt;相互尊重&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;当对方说他不知道某件事情时, 不要「刻意的或无意的」表示惊讶。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括技术问题什么?!我不能相信你不知道堆栈是什么!」和非技术问题「你不知道谁是RMS ?!」(RMS: Richard Matthew Stallman, 自由软件奠基人)。&lt;/p&gt;
&lt;p&gt;「故作惊讶」不会让沟通变得更顺畅, 同时也没有提供更多的信息到对话中: 当人们故作惊讶时, 通常是为了能自我感觉良好, 而使其他人感受很糟糕, 即使这些行为不是有意的。&lt;/p&gt;
&lt;p&gt;显然, 这与我们的另一个原则十分相关: 创造一个氛围, 让人们在说「我不知道」时能感到自在无压力。&lt;/p&gt;
    
    </summary>
    
      <category term="管理" scheme="https://arvirt.com/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="转载" scheme="https://arvirt.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="行为准则" scheme="https://arvirt.com/tags/%E8%A1%8C%E4%B8%BA%E5%87%86%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>nginx动态配置文件</title>
    <link href="https://arvirt.com/2019/03/24/dynamic-configuration-for-nginx/"/>
    <id>https://arvirt.com/2019/03/24/dynamic-configuration-for-nginx/</id>
    <published>2019-03-24T08:26:49.000Z</published>
    <updated>2019-09-21T06:45:17.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>公司<code>web</code>项目有接近<code>10</code>个，再加上不同服务对象、地区等等能凑一个连队。遇到更新是个麻烦事，虽然自动化可以解决，但是配置文件模板还是人工修改的，工作量并没有减少太多，而且有个别会有些特殊情况，维护起来也是麻烦。为了偷懒，少改几个文件，就想着把每台机器所有的项目（特殊的除外）用一个配置去处理不就行了？</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实很简单，多个项目，多个域名，用一个配置文件的话，只需要针对不同域名的，将请求分配到不同的<code>root</code>，日志写到对应的<code>access_log</code>，基本上就满足需求了。<a href="https://gist.github.com/opszhou/805c9303ed6c5837eda7b55a35fe8510" target="_blank" rel="noopener">配置文件示例</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>配置文件写好后，在测试的过程中，遇到一个问题，日志文件没有被创建，<code>nginx</code>错误日志有提示没有权限。</p><blockquote><p>open() “/var/logs/nginx/.log” failed (13: Permission denied) while logging request,</p></blockquote><p>解决方法：<br>在<code>server</code>添加<code>root directory</code>，而且此目录必须存在。官方的使用限制说明：</p><blockquote><p>the file path can contain variables (0.7.6+), but such logs have some constraints:</p><ol><li>the user whose credentials are used by worker processes should have permissions to create files in a directory with such logs;</li><li>buffered writes do not work;</li><li>the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a cache, writing to the old file can continue during the time specified by the open_log_file_cache directive’s valid parameter</li><li>during each log write the existence of the request’s root directory is checked, and if it does not exist the log is not created. It is thus a good idea to specify both root and access_log on the same level:<br>server {<br> root       /spool/vhost/data/$host;<br> access_log /spool/vhost/logs/$host;<br> …</li></ol></blockquote><p>设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root /var/logs/nginx;</span><br><span class="line">access_log /var/logs/nginx/$domain_name.log access;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;公司&lt;code&gt;web&lt;/code&gt;项目有接近&lt;code&gt;10&lt;/code&gt;个，再加上不同服务对象、地区等等能凑一个连队。遇到更新是个麻烦事，虽然自动化可以解决，但是配置文件模板还是人工修改的，工作量并没有减少太多，而且有个别会有些特殊情况，维护起来也是麻烦。为了偷懒，少改几个文件，就想着把每台机器所有的项目（特殊的除外）用一个配置去处理不就行了？&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://arvirt.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://arvirt.com/tags/nginx/"/>
    
      <category term="nginx config" scheme="https://arvirt.com/tags/nginx-config/"/>
    
  </entry>
  
</feed>
